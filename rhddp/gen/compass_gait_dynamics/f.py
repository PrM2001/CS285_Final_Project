# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def f(x, u):
    # type: (numpy.ndarray, numpy.ndarray) -> numpy.ndarray
    """
    This function was autogenerated. Do not modify by hand.

    Args:
        x: Matrix81
        u: Matrix11

    Outputs:
        f: Matrix81
    """

    # Total ops: 368

    # Input arrays
    if x.shape == (8,):
        x = x.reshape((8, 1))
    elif x.shape != (8, 1):
        raise IndexError(
            "x is expected to have shape (8, 1) or (8,); instead had shape {}".format(x.shape)
        )

    if u.shape == (1,):
        u = u.reshape((1, 1))
    elif u.shape != (1, 1):
        raise IndexError(
            "u is expected to have shape (1, 1) or (1,); instead had shape {}".format(u.shape)
        )

    # Intermediate terms (84)
    _tmp0 = x[2, 0] + x[3, 0]
    _tmp1 = math.cos(_tmp0)
    _tmp2 = math.sin(_tmp0)
    _tmp3 = math.sin(x[2, 0])
    _tmp4 = _tmp2 + _tmp3
    _tmp5 = math.cos(x[2, 0])
    _tmp6 = _tmp1 + _tmp5
    _tmp7 = -0.0833333333333333 * _tmp1 * _tmp6 - 0.0833333333333333 * _tmp2 * _tmp4 + 0.25
    _tmp8 = 1 / (-0.0833333333333333 * _tmp4**2 - 0.0833333333333333 * _tmp6**2 + 0.5)
    _tmp9 = _tmp7**2 * _tmp8
    _tmp10 = 1 / (-0.0833333333333333 * _tmp1**2 - 0.0833333333333333 * _tmp2**2 - _tmp9 + 0.25)
    _tmp11 = 0.5 * _tmp10
    _tmp12 = _tmp10 * _tmp7
    _tmp13 = 0.5 * _tmp12 * _tmp8
    _tmp14 = -_tmp1 * _tmp11 + _tmp13 * _tmp6
    _tmp15 = 0.333333333333333 * _tmp14
    _tmp16 = 1.0 * _tmp10
    _tmp17 = _tmp8 * (_tmp16 * _tmp9 + 1.0)
    _tmp18 = 1.0 * _tmp5
    _tmp19 = 0.5 * _tmp17
    _tmp20 = 0.333333333333333 * _tmp1 * _tmp13 - 0.333333333333333 * _tmp19 * _tmp6
    _tmp21 = _tmp17 * _tmp18 + _tmp20
    _tmp22 = 0.166666666666667 * _tmp6
    _tmp23 = _tmp7 * _tmp8
    _tmp24 = -0.166666666666667 * _tmp1 + _tmp22 * _tmp23
    _tmp25 = _tmp8 * (-_tmp12 * _tmp24 - _tmp22)
    _tmp26 = _tmp10 * _tmp24
    _tmp27 = 0.5 * _tmp26
    _tmp28 = 0.5 * _tmp25
    _tmp29 = (
        -0.333333333333333 * _tmp1 * _tmp27 - 0.333333333333333 * _tmp28 * _tmp6 + 0.333333333333333
    )
    _tmp30 = 1 / (_tmp18 * _tmp21 + _tmp18 * _tmp25 + _tmp29)
    _tmp31 = 0.166666666666667 * _tmp4
    _tmp32 = -0.166666666666667 * _tmp2 + _tmp23 * _tmp31
    _tmp33 = _tmp8 * (-_tmp12 * _tmp32 - _tmp31)
    _tmp34 = 0.5 * _tmp33
    _tmp35 = _tmp10 * _tmp32
    _tmp36 = 0.5 * _tmp35
    _tmp37 = (
        -0.333333333333333 * _tmp2 * _tmp36 - 0.333333333333333 * _tmp34 * _tmp4 + 0.333333333333333
    )
    _tmp38 = 1.0 * _tmp3
    _tmp39 = 0.333333333333333 * _tmp13 * _tmp2 - 0.333333333333333 * _tmp19 * _tmp4
    _tmp40 = _tmp17 * _tmp38 + _tmp39
    _tmp41 = -0.333333333333333 * _tmp1 * _tmp36 - 0.333333333333333 * _tmp34 * _tmp6
    _tmp42 = _tmp18 * _tmp33 + _tmp21 * _tmp38 + _tmp41
    _tmp43 = -0.333333333333333 * _tmp2 * _tmp27 - 0.333333333333333 * _tmp28 * _tmp4
    _tmp44 = _tmp30 * (_tmp18 * _tmp40 + _tmp25 * _tmp38 + _tmp43)
    _tmp45 = _tmp42 * _tmp44
    _tmp46 = 1 / (_tmp33 * _tmp38 + _tmp37 + _tmp38 * _tmp40 - _tmp45)
    _tmp47 = _tmp30 * (_tmp45 * _tmp46 + 1)
    _tmp48 = _tmp18 * _tmp47
    _tmp49 = _tmp38 * _tmp46
    _tmp50 = _tmp30 * _tmp42
    _tmp51 = _tmp48 - _tmp49 * _tmp50
    _tmp52 = _tmp16 * _tmp23
    _tmp53 = -_tmp11 * _tmp2 + _tmp13 * _tmp4
    _tmp54 = 0.333333333333333 * _tmp53
    _tmp55 = _tmp46 * _tmp54
    _tmp56 = _tmp15 * _tmp47 - _tmp50 * _tmp55 - _tmp51 * _tmp52
    _tmp57 = -_tmp44 * _tmp49 + _tmp48
    _tmp58 = -_tmp18 * _tmp46 * _tmp50 + _tmp49
    _tmp59 = _tmp18 * _tmp57 + _tmp38 * _tmp58
    _tmp60 = _tmp15 * _tmp57 - _tmp52 * _tmp59 + _tmp54 * _tmp58
    _tmp61 = _tmp44 * _tmp46
    _tmp62 = -_tmp18 * _tmp61 + _tmp49
    _tmp63 = -_tmp15 * _tmp61 - _tmp52 * _tmp62 + _tmp55
    _tmp64 = 0.003 * u[0, 0]
    _tmp65 = _tmp3 * x[6, 0]
    _tmp66 = 1.0 * _tmp65
    _tmp67 = _tmp18 * x[6, 0]
    _tmp68 = _tmp2 * x[7, 0]
    _tmp69 = 0.5 * x[6, 0]
    _tmp70 = -0.5 * _tmp68 * (-x[6, 0] - x[7, 0]) + _tmp69 * (_tmp2 * x[6, 0] + _tmp65 + _tmp68)
    _tmp71 = 4.905 * _tmp2
    _tmp72 = 4.905 * _tmp4
    _tmp73 = _tmp1 * x[7, 0]
    _tmp74 = -_tmp69 * (_tmp6 * x[6, 0] + _tmp73) - 0.5 * _tmp73 * (x[6, 0] + x[7, 0]) - 29.43
    _tmp75 = (
        _tmp60 * _tmp71
        - _tmp70 * (_tmp25 * _tmp59 + _tmp29 * _tmp57 + _tmp43 * _tmp58)
        - _tmp72 * (-_tmp17 * _tmp59 - _tmp20 * _tmp57 - _tmp39 * _tmp58 + 1.0)
        - _tmp74 * (_tmp33 * _tmp59 + _tmp37 * _tmp58 + _tmp41 * _tmp57)
        - x[6, 0] * (-_tmp57 * _tmp66 + _tmp58 * _tmp67)
    )
    _tmp76 = _tmp43 * _tmp46
    _tmp77 = _tmp46 * _tmp67
    _tmp78 = _tmp39 * _tmp46
    _tmp79 = _tmp37 * _tmp46
    _tmp80 = (
        _tmp56 * _tmp71
        + _tmp70 * (-_tmp25 * _tmp51 - _tmp29 * _tmp47 + _tmp50 * _tmp76 + 1.0)
        + _tmp72 * (_tmp17 * _tmp51 + _tmp20 * _tmp47 - _tmp50 * _tmp78)
        - _tmp74 * (_tmp33 * _tmp51 + _tmp41 * _tmp47 - _tmp50 * _tmp79)
        - x[6, 0] * (-_tmp47 * _tmp66 - _tmp50 * _tmp77)
    )
    _tmp81 = (
        _tmp63 * _tmp71
        - _tmp70 * (_tmp25 * _tmp62 - _tmp29 * _tmp61 + _tmp76)
        + _tmp72 * (_tmp17 * _tmp62 - _tmp20 * _tmp61 + _tmp78)
        + _tmp74 * (-_tmp33 * _tmp62 + _tmp41 * _tmp61 - _tmp79 + 1.0)
        - x[6, 0] * (_tmp61 * _tmp66 + _tmp77)
    )
    _tmp82 = 1.635 * _tmp2
    _tmp83 = _tmp10 * _tmp71

    # Output terms
    _f = numpy.zeros(8)
    _f[0] = x[0, 0] + 0.003 * x[4, 0]
    _f[1] = x[1, 0] + 0.003 * x[5, 0]
    _f[2] = x[2, 0] + 0.003 * x[6, 0]
    _f[3] = x[3, 0] + 0.003 * x[7, 0]
    _f[4] = (
        -0.003 * _tmp14 * _tmp82
        + 0.003 * _tmp20 * _tmp75
        + 0.003 * _tmp29 * _tmp80
        + 0.003 * _tmp41 * _tmp81
        + _tmp64 * (_tmp15 - _tmp20 * _tmp60 - _tmp29 * _tmp56 - _tmp41 * _tmp63)
        + x[4, 0]
    )
    _f[5] = (
        0.003 * _tmp37 * _tmp81
        + 0.003 * _tmp39 * _tmp75
        + 0.003 * _tmp43 * _tmp80
        - 0.003 * _tmp53 * _tmp82
        + _tmp64 * (-_tmp37 * _tmp63 - _tmp39 * _tmp60 - _tmp43 * _tmp56 + _tmp54)
        + x[5, 0]
    )
    _f[6] = (
        0.003 * _tmp17 * _tmp75
        + 0.003 * _tmp23 * _tmp83
        + 0.003 * _tmp25 * _tmp80
        + 0.003 * _tmp33 * _tmp81
        + _tmp64 * (-_tmp17 * _tmp60 - _tmp25 * _tmp56 - _tmp33 * _tmp63 - _tmp52)
        + x[6, 0]
    )
    _f[7] = (
        0.003 * _tmp26 * _tmp80
        + 0.003 * _tmp35 * _tmp81
        - 0.003 * _tmp52 * _tmp75
        + _tmp64 * (_tmp16 - _tmp26 * _tmp56 - _tmp35 * _tmp63 + _tmp52 * _tmp60)
        - 0.003 * _tmp83
        + x[7, 0]
    )
    return _f
