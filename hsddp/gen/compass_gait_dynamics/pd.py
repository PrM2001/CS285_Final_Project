# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def pd(x, d):
    # type: (numpy.ndarray, numpy.ndarray) -> numpy.ndarray
    """
    This function was autogenerated. Do not modify by hand.

    Args:
        x: Matrix81
        d: Matrix11

    Outputs:
        pd: Matrix81
    """

    # Total ops: 391

    # Input arrays
    if x.shape == (8,):
        x = x.reshape((8, 1))
    elif x.shape != (8, 1):
        raise IndexError(
            "x is expected to have shape (8, 1) or (8,); instead had shape {}".format(x.shape)
        )

    if d.shape == (1,):
        d = d.reshape((1, 1))
    elif d.shape != (1, 1):
        raise IndexError(
            "d is expected to have shape (1, 1) or (1,); instead had shape {}".format(d.shape)
        )

    # Intermediate terms (108)
    _tmp0 = x[2, 0] + x[3, 0]
    _tmp1 = math.cos(_tmp0)
    _tmp2 = _tmp1 + math.cos(x[2, 0])
    _tmp3 = math.sin(_tmp0)
    _tmp4 = _tmp3 + math.sin(x[2, 0])
    _tmp5 = 1 / (-0.0833333333333333 * _tmp2**2 - 0.0833333333333333 * _tmp4**2 + 0.5)
    _tmp6 = 0.5 * _tmp4
    _tmp7 = 0.166666666666667 * _tmp4
    _tmp8 = -0.0833333333333333 * _tmp1 * _tmp2 - 0.0833333333333333 * _tmp3 * _tmp4 + 0.25
    _tmp9 = _tmp5 * _tmp8**2
    _tmp10 = 1 / (-0.0833333333333333 * _tmp1**2 - 0.0833333333333333 * _tmp3**2 - _tmp9 + 0.25)
    _tmp11 = _tmp5 * _tmp8
    _tmp12 = _tmp11 * _tmp7 - 0.166666666666667 * _tmp3
    _tmp13 = _tmp10 * _tmp12
    _tmp14 = -_tmp13 * _tmp8 - _tmp7
    _tmp15 = _tmp14 * _tmp5
    _tmp16 = 0.5 * _tmp3
    _tmp17 = (
        -0.333333333333333 * _tmp13 * _tmp16
        - 0.333333333333333 * _tmp15 * _tmp6
        + 0.333333333333333
    )
    _tmp18 = 1.0 * _tmp3
    _tmp19 = _tmp10 * _tmp18
    _tmp20 = -_tmp11 * _tmp19
    _tmp21 = 1.0 * _tmp10
    _tmp22 = _tmp21 * _tmp9 + 1.0
    _tmp23 = _tmp22 * _tmp5
    _tmp24 = _tmp10 * _tmp16
    _tmp25 = 0.333333333333333 * _tmp11 * _tmp24 - 0.333333333333333 * _tmp23 * _tmp6
    _tmp26 = _tmp18 * _tmp23 + _tmp20 + _tmp25
    _tmp27 = 1.0 * _tmp1
    _tmp28 = 0.166666666666667 * _tmp2
    _tmp29 = -0.166666666666667 * _tmp1 + _tmp11 * _tmp28
    _tmp30 = _tmp10 * _tmp29
    _tmp31 = -_tmp28 - _tmp30 * _tmp8
    _tmp32 = _tmp31 * _tmp5
    _tmp33 = _tmp10 * _tmp11
    _tmp34 = -0.333333333333333 * _tmp24 + 0.333333333333333 * _tmp33 * _tmp6
    _tmp35 = _tmp19 + _tmp20 + _tmp34
    _tmp36 = -0.333333333333333 * _tmp16 * _tmp30 - 0.333333333333333 * _tmp32 * _tmp6
    _tmp37 = _tmp18 * _tmp30 + _tmp18 * _tmp32 + _tmp26 * _tmp27 + _tmp27 * _tmp35 + _tmp36
    _tmp38 = 0.5 * _tmp2
    _tmp39 = 0.5 * _tmp1
    _tmp40 = -0.333333333333333 * _tmp13 * _tmp39 - 0.333333333333333 * _tmp15 * _tmp38
    _tmp41 = _tmp1 * _tmp21
    _tmp42 = -_tmp11 * _tmp41
    _tmp43 = _tmp10 * _tmp39
    _tmp44 = 0.333333333333333 * _tmp11 * _tmp43 - 0.333333333333333 * _tmp23 * _tmp38
    _tmp45 = _tmp23 * _tmp27 + _tmp42 + _tmp44
    _tmp46 = 0.333333333333333 * _tmp33 * _tmp38 - 0.333333333333333 * _tmp43
    _tmp47 = _tmp41 + _tmp42 + _tmp46
    _tmp48 = (
        -0.333333333333333 * _tmp30 * _tmp39
        - 0.333333333333333 * _tmp32 * _tmp38
        + 0.333333333333333
    )
    _tmp49 = 1 / (_tmp27 * _tmp30 + _tmp27 * _tmp32 + _tmp27 * _tmp45 + _tmp27 * _tmp47 + _tmp48)
    _tmp50 = _tmp49 * (
        _tmp13 * _tmp27 + _tmp15 * _tmp27 + _tmp18 * _tmp45 + _tmp18 * _tmp47 + _tmp40
    )
    _tmp51 = _tmp37 * _tmp50
    _tmp52 = 1 / (
        _tmp13 * _tmp18 + _tmp15 * _tmp18 + _tmp17 + _tmp18 * _tmp26 + _tmp18 * _tmp35 - _tmp51
    )
    _tmp53 = _tmp18 * _tmp52
    _tmp54 = _tmp49 * (_tmp51 * _tmp52 + 1)
    _tmp55 = _tmp27 * _tmp54
    _tmp56 = -_tmp50 * _tmp53 + _tmp55
    _tmp57 = _tmp5 * _tmp56
    _tmp58 = _tmp21 * _tmp8
    _tmp59 = -_tmp57 * _tmp58
    _tmp60 = _tmp25 * _tmp52
    _tmp61 = _tmp22 * _tmp57 + _tmp44 * _tmp54 - _tmp50 * _tmp60 + _tmp59
    _tmp62 = _tmp37 * _tmp49
    _tmp63 = -_tmp53 * _tmp62 + _tmp55
    _tmp64 = _tmp27 * _tmp52
    _tmp65 = -_tmp50 * _tmp64 + _tmp53
    _tmp66 = _tmp18 * _tmp65 + _tmp27 * _tmp63
    _tmp67 = _tmp5 * _tmp66
    _tmp68 = -_tmp58 * _tmp67
    _tmp69 = _tmp22 * _tmp67 + _tmp25 * _tmp65 + _tmp44 * _tmp63 + _tmp68
    _tmp70 = 1.0 - _tmp69
    _tmp71 = _tmp53 - _tmp62 * _tmp64
    _tmp72 = _tmp10 * _tmp71
    _tmp73 = 1.0 * _tmp72
    _tmp74 = -_tmp11 * _tmp73
    _tmp75 = _tmp5 * _tmp71
    _tmp76 = _tmp52 * _tmp62
    _tmp77 = _tmp22 * _tmp75 - _tmp44 * _tmp76 + _tmp60 + _tmp74
    _tmp78 = -_tmp40 * _tmp77 + _tmp44 * _tmp70 - _tmp46 * _tmp69 - _tmp48 * _tmp61
    _tmp79 = 0.5 * _tmp78
    _tmp80 = _tmp34 * _tmp52
    _tmp81 = -_tmp46 * _tmp76 + _tmp73 + _tmp74 + _tmp80
    _tmp82 = _tmp21 * _tmp66 + _tmp34 * _tmp65 + _tmp46 * _tmp63 + _tmp68
    _tmp83 = 1.0 - _tmp82
    _tmp84 = _tmp21 * _tmp56 + _tmp46 * _tmp54 - _tmp50 * _tmp80 + _tmp59
    _tmp85 = -_tmp40 * _tmp81 - _tmp44 * _tmp82 + _tmp46 * _tmp83 - _tmp48 * _tmp84
    _tmp86 = _tmp36 * _tmp52
    _tmp87 = _tmp29 * _tmp72 + _tmp31 * _tmp75 - _tmp48 * _tmp76 + _tmp86
    _tmp88 = _tmp30 * _tmp66 + _tmp31 * _tmp67 + _tmp36 * _tmp65 + _tmp48 * _tmp63
    _tmp89 = -_tmp30 * _tmp56 - _tmp31 * _tmp57 - _tmp48 * _tmp54 + _tmp50 * _tmp86 + 1.0
    _tmp90 = -_tmp40 * _tmp87 - _tmp44 * _tmp88 - _tmp46 * _tmp88 + _tmp48 * _tmp89
    _tmp91 = 0.25 * _tmp85
    _tmp92 = _tmp17 * _tmp52
    _tmp93 = _tmp13 * _tmp56 + _tmp14 * _tmp57 + _tmp40 * _tmp54 - _tmp50 * _tmp92
    _tmp94 = _tmp13 * _tmp66 + _tmp14 * _tmp67 + _tmp17 * _tmp65 + _tmp40 * _tmp63
    _tmp95 = -_tmp12 * _tmp72 - _tmp14 * _tmp75 + _tmp40 * _tmp76 - _tmp92 + 1.0
    _tmp96 = _tmp40 * _tmp95 - _tmp44 * _tmp94 - _tmp46 * _tmp94 - _tmp48 * _tmp93
    _tmp97 = (
        x[4, 0] * (_tmp2 * _tmp79 + _tmp39 * _tmp85 + 3.0 * _tmp90)
        + x[5, 0] * (_tmp16 * _tmp85 + _tmp4 * _tmp79 + 3.0 * _tmp96)
        + x[6, 0] * (_tmp38 * _tmp90 + _tmp6 * _tmp96 + _tmp79 + _tmp91)
        + x[7, 0] * (_tmp16 * _tmp96 + _tmp39 * _tmp90 + 0.25 * _tmp78 + _tmp91)
    )
    _tmp98 = _tmp97 / _tmp1
    _tmp99 = _tmp11 * _tmp21
    _tmp100 = -_tmp13 * _tmp81 + _tmp21 * _tmp83 - _tmp30 * _tmp84 + _tmp82 * _tmp99
    _tmp101 = -_tmp13 * _tmp77 - _tmp21 * _tmp69 - _tmp30 * _tmp61 - _tmp70 * _tmp99
    _tmp102 = 0.5 * _tmp101
    _tmp103 = _tmp21 * _tmp94
    _tmp104 = _tmp103 * _tmp11 - _tmp103 + _tmp13 * _tmp95 - _tmp30 * _tmp93
    _tmp105 = _tmp21 * _tmp88
    _tmp106 = _tmp105 * _tmp11 - _tmp105 - _tmp13 * _tmp87 + _tmp30 * _tmp89
    _tmp107 = 0.25 * _tmp100

    # Output terms
    _pd = numpy.zeros(8)
    _pd[0] = 0
    _pd[1] = 0
    _pd[2] = 0
    _pd[3] = 0
    _pd[4] = _tmp97
    _pd[5] = _tmp3 * _tmp98
    _pd[6] = -_tmp98
    _pd[7] = (
        -x[4, 0] * (_tmp100 * _tmp39 + _tmp102 * _tmp2 + 3.0 * _tmp106)
        - x[5, 0] * (_tmp100 * _tmp16 + _tmp102 * _tmp4 + 3.0 * _tmp104)
        - x[6, 0] * (_tmp102 + _tmp104 * _tmp6 + _tmp106 * _tmp38 + _tmp107)
        - x[7, 0] * (0.25 * _tmp101 + _tmp104 * _tmp16 + _tmp106 * _tmp39 + _tmp107)
    )
    return _pd
