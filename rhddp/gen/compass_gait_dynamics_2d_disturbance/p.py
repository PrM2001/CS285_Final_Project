# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def p(x, d):
    # type: (numpy.ndarray, numpy.ndarray) -> numpy.ndarray
    """
    This function was autogenerated. Do not modify by hand.

    Args:
        x: Matrix81
        d: Matrix21

    Outputs:
        p: Matrix81
    """

    # Total ops: 393

    # Input arrays
    if x.shape == (8,):
        x = x.reshape((8, 1))
    elif x.shape != (8, 1):
        raise IndexError(
            "x is expected to have shape (8, 1) or (8,); instead had shape {}".format(x.shape)
        )

    if d.shape == (2,):
        d = d.reshape((2, 1))
    elif d.shape != (2, 1):
        raise IndexError(
            "d is expected to have shape (2, 1) or (2,); instead had shape {}".format(d.shape)
        )

    # Intermediate terms (104)
    _tmp0 = x[2, 0] + x[3, 0]
    _tmp1 = math.cos(_tmp0)
    _tmp2 = _tmp1 + math.cos(x[2, 0])
    _tmp3 = math.sin(_tmp0)
    _tmp4 = _tmp3 + math.sin(x[2, 0])
    _tmp5 = 1 / (-0.0833333333333333 * _tmp2**2 - 0.0833333333333333 * _tmp4**2 + 0.5)
    _tmp6 = 0.166666666666667 * _tmp4
    _tmp7 = -0.0833333333333333 * _tmp1 * _tmp2 - 0.0833333333333333 * _tmp3 * _tmp4 + 0.25
    _tmp8 = _tmp5 * _tmp7**2
    _tmp9 = 1 / (-0.0833333333333333 * _tmp1**2 - 0.0833333333333333 * _tmp3**2 - _tmp8 + 0.25)
    _tmp10 = _tmp5 * _tmp7
    _tmp11 = _tmp10 * _tmp6 - 0.166666666666667 * _tmp3
    _tmp12 = _tmp11 * _tmp9
    _tmp13 = _tmp5 * (-_tmp12 * _tmp7 - _tmp6)
    _tmp14 = 0.5 * _tmp4
    _tmp15 = 0.5 * _tmp3
    _tmp16 = (
        -0.333333333333333 * _tmp12 * _tmp15
        - 0.333333333333333 * _tmp13 * _tmp14
        + 0.333333333333333
    )
    _tmp17 = 1.0 * _tmp9
    _tmp18 = _tmp17 * _tmp3
    _tmp19 = -_tmp10 * _tmp18
    _tmp20 = 1.0 * _tmp3
    _tmp21 = _tmp5 * (_tmp17 * _tmp8 + 1.0)
    _tmp22 = _tmp15 * _tmp9
    _tmp23 = 0.333333333333333 * _tmp10 * _tmp22 - 0.333333333333333 * _tmp14 * _tmp21
    _tmp24 = _tmp19 + _tmp20 * _tmp21 + _tmp23
    _tmp25 = 1.0 * _tmp1
    _tmp26 = 0.166666666666667 * _tmp2
    _tmp27 = -0.166666666666667 * _tmp1 + _tmp10 * _tmp26
    _tmp28 = _tmp27 * _tmp9
    _tmp29 = _tmp5 * (-_tmp26 - _tmp28 * _tmp7)
    _tmp30 = _tmp10 * _tmp9
    _tmp31 = 0.333333333333333 * _tmp14 * _tmp30 - 0.333333333333333 * _tmp22
    _tmp32 = _tmp18 + _tmp19 + _tmp31
    _tmp33 = -0.333333333333333 * _tmp14 * _tmp29 - 0.333333333333333 * _tmp15 * _tmp28
    _tmp34 = _tmp18 * _tmp27 + _tmp20 * _tmp29 + _tmp24 * _tmp25 + _tmp25 * _tmp32 + _tmp33
    _tmp35 = 0.5 * _tmp2
    _tmp36 = 0.5 * _tmp1
    _tmp37 = -0.333333333333333 * _tmp12 * _tmp36 - 0.333333333333333 * _tmp13 * _tmp35
    _tmp38 = _tmp1 * _tmp17
    _tmp39 = -_tmp10 * _tmp38
    _tmp40 = _tmp36 * _tmp9
    _tmp41 = 0.333333333333333 * _tmp10 * _tmp40 - 0.333333333333333 * _tmp21 * _tmp35
    _tmp42 = _tmp21 * _tmp25 + _tmp39 + _tmp41
    _tmp43 = 0.333333333333333 * _tmp30 * _tmp35 - 0.333333333333333 * _tmp40
    _tmp44 = _tmp38 + _tmp39 + _tmp43
    _tmp45 = (
        -0.333333333333333 * _tmp28 * _tmp36
        - 0.333333333333333 * _tmp29 * _tmp35
        + 0.333333333333333
    )
    _tmp46 = 1 / (_tmp25 * _tmp29 + _tmp25 * _tmp42 + _tmp25 * _tmp44 + _tmp27 * _tmp38 + _tmp45)
    _tmp47 = _tmp46 * (
        _tmp11 * _tmp38 + _tmp13 * _tmp25 + _tmp20 * _tmp42 + _tmp20 * _tmp44 + _tmp37
    )
    _tmp48 = _tmp34 * _tmp47
    _tmp49 = 1 / (
        _tmp11 * _tmp18 + _tmp13 * _tmp20 + _tmp16 + _tmp20 * _tmp24 + _tmp20 * _tmp32 - _tmp48
    )
    _tmp50 = _tmp20 * _tmp49
    _tmp51 = _tmp46 * (_tmp48 * _tmp49 + 1)
    _tmp52 = _tmp25 * _tmp51
    _tmp53 = -_tmp47 * _tmp50 + _tmp52
    _tmp54 = _tmp17 * _tmp53
    _tmp55 = -_tmp10 * _tmp54
    _tmp56 = _tmp23 * _tmp49
    _tmp57 = _tmp21 * _tmp53 + _tmp41 * _tmp51 - _tmp47 * _tmp56 + _tmp55
    _tmp58 = _tmp34 * _tmp46
    _tmp59 = -_tmp50 * _tmp58 + _tmp52
    _tmp60 = _tmp25 * _tmp49
    _tmp61 = -_tmp47 * _tmp60 + _tmp50
    _tmp62 = _tmp20 * _tmp61 + _tmp25 * _tmp59
    _tmp63 = _tmp17 * _tmp62
    _tmp64 = -_tmp10 * _tmp63
    _tmp65 = _tmp21 * _tmp62 + _tmp23 * _tmp61 + _tmp41 * _tmp59 + _tmp64
    _tmp66 = 1.0 - _tmp65
    _tmp67 = _tmp50 - _tmp58 * _tmp60
    _tmp68 = _tmp17 * _tmp67
    _tmp69 = -_tmp10 * _tmp68
    _tmp70 = _tmp49 * _tmp58
    _tmp71 = _tmp21 * _tmp67 - _tmp41 * _tmp70 + _tmp56 + _tmp69
    _tmp72 = -_tmp37 * _tmp71 + _tmp41 * _tmp66 - _tmp43 * _tmp65 - _tmp45 * _tmp57
    _tmp73 = 0.5 * _tmp72
    _tmp74 = _tmp31 * _tmp49
    _tmp75 = -_tmp43 * _tmp70 + _tmp68 + _tmp69 + _tmp74
    _tmp76 = _tmp31 * _tmp61 + _tmp43 * _tmp59 + _tmp63 + _tmp64
    _tmp77 = 1.0 - _tmp76
    _tmp78 = _tmp43 * _tmp51 - _tmp47 * _tmp74 + _tmp54 + _tmp55
    _tmp79 = -_tmp37 * _tmp75 - _tmp41 * _tmp76 + _tmp43 * _tmp77 - _tmp45 * _tmp78
    _tmp80 = _tmp33 * _tmp49
    _tmp81 = _tmp28 * _tmp67 + _tmp29 * _tmp67 - _tmp45 * _tmp70 + _tmp80
    _tmp82 = _tmp28 * _tmp62 + _tmp29 * _tmp62 + _tmp33 * _tmp61 + _tmp45 * _tmp59
    _tmp83 = -_tmp28 * _tmp53 - _tmp29 * _tmp53 - _tmp45 * _tmp51 + _tmp47 * _tmp80 + 1.0
    _tmp84 = -_tmp37 * _tmp81 - _tmp41 * _tmp82 - _tmp43 * _tmp82 + _tmp45 * _tmp83
    _tmp85 = 0.25 * _tmp79
    _tmp86 = _tmp16 * _tmp49
    _tmp87 = _tmp12 * _tmp53 + _tmp13 * _tmp53 + _tmp37 * _tmp51 - _tmp47 * _tmp86
    _tmp88 = _tmp12 * _tmp62 + _tmp13 * _tmp62 + _tmp16 * _tmp61 + _tmp37 * _tmp59
    _tmp89 = -_tmp12 * _tmp67 - _tmp13 * _tmp67 + _tmp37 * _tmp70 - _tmp86 + 1.0
    _tmp90 = _tmp37 * _tmp89 - _tmp41 * _tmp88 - _tmp43 * _tmp88 - _tmp45 * _tmp87
    _tmp91 = 0.5 * _tmp90
    _tmp92 = (d[0, 0] + 0.9) * (
        x[4, 0] * (_tmp2 * _tmp73 + _tmp36 * _tmp79 + 3.0 * _tmp84)
        + x[5, 0] * (_tmp15 * _tmp79 + _tmp4 * _tmp73 + 3.0 * _tmp90)
        + x[6, 0] * (_tmp35 * _tmp84 + _tmp4 * _tmp91 + _tmp73 + _tmp85)
        + x[7, 0] * (_tmp3 * _tmp91 + _tmp36 * _tmp84 + 0.25 * _tmp72 + _tmp85)
    )
    _tmp93 = _tmp92 / _tmp1
    _tmp94 = _tmp10 * _tmp17
    _tmp95 = -_tmp12 * _tmp75 + _tmp17 * _tmp77 - _tmp28 * _tmp78 + _tmp76 * _tmp94
    _tmp96 = 0.5 * _tmp95
    _tmp97 = -_tmp12 * _tmp71 - _tmp17 * _tmp65 - _tmp28 * _tmp57 - _tmp66 * _tmp94
    _tmp98 = 0.5 * _tmp97
    _tmp99 = _tmp17 * _tmp88
    _tmp100 = _tmp10 * _tmp99 + _tmp12 * _tmp89 - _tmp28 * _tmp87 - _tmp99
    _tmp101 = _tmp17 * _tmp82
    _tmp102 = _tmp10 * _tmp101 - _tmp101 - _tmp12 * _tmp81 + _tmp28 * _tmp83
    _tmp103 = 0.25 * _tmp95

    # Output terms
    _p = numpy.zeros(8)
    _p[0] = x[0, 0]
    _p[1] = x[1, 0]
    _p[2] = _tmp0
    _p[3] = -x[3, 0]
    _p[4] = _tmp92
    _p[5] = _tmp3 * _tmp93
    _p[6] = -_tmp93
    _p[7] = -(d[1, 0] + 0.9) * (
        x[4, 0] * (_tmp1 * _tmp96 + 3.0 * _tmp102 + _tmp2 * _tmp98)
        + x[5, 0] * (3.0 * _tmp100 + _tmp3 * _tmp96 + _tmp4 * _tmp98)
        + x[6, 0] * (_tmp100 * _tmp14 + _tmp102 * _tmp35 + _tmp103 + _tmp98)
        + x[7, 0] * (_tmp100 * _tmp15 + _tmp102 * _tmp36 + _tmp103 + 0.25 * _tmp97)
    )
    return _p
